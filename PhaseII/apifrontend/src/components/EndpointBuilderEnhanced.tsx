import { useState } from "react";
import { Plus, Edit, Trash2, Play, ArrowRight, Save, X, Copy, ExternalLink } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";

interface Endpoint {
  id: string;
  method: "GET" | "POST" | "PUT" | "DELETE";
  path: string;
  description: string;
  model: string;
  autoGenerated: boolean;
  status: "active" | "inactive";
  parameters?: string[];
}

const mockEndpoints: Endpoint[] = [
  { id: "1", method: "GET", path: "/api/users", description: "Get all users", model: "User", autoGenerated: true, status: "active" },
  { id: "2", method: "POST", path: "/api/users", description: "Create new user", model: "User", autoGenerated: true, status: "active" },
  { id: "3", method: "GET", path: "/api/users/:id", description: "Get user by ID", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "4", method: "PUT", path: "/api/users/:id", description: "Update user", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "5", method: "DELETE", path: "/api/users/:id", description: "Delete user", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "6", method: "GET", path: "/api/posts", description: "Get all posts", model: "Post", autoGenerated: true, status: "active" },
  { id: "7", method: "POST", path: "/api/posts", description: "Create new post", model: "Post", autoGenerated: true, status: "active" },
  { id: "8", method: "GET", path: "/api/auth/login", description: "User login", model: "Custom", autoGenerated: false, status: "active" },
];

const requestFlow = [
  { step: "Request", description: "Incoming API request", icon: "üì•" },
  { step: "Auth", description: "Authentication check", icon: "üîê" },
  { step: "Validation", description: "Data validation", icon: "‚úÖ" },
  { step: "Database", description: "Database operation", icon: "üóÑÔ∏è" },
  { step: "Response", description: "Response formatting", icon: "üì§" },
];

interface EndpointBuilderProps {
  project: any;
}

export function EndpointBuilderEnhanced({ project }: EndpointBuilderProps) {
  const [endpoints, setEndpoints] = useState<Endpoint[]>(mockEndpoints);
  const [selectedEndpoint, setSelectedEndpoint] = useState<Endpoint | null>(null);
  const [showNewEndpointDialog, setShowNewEndpointDialog] = useState(false);
  const [newEndpoint, setNewEndpoint] = useState({
    method: "GET" as const,
    path: "",
    description: "",
    model: "Custom"
  });

  const handleAddEndpoint = () => {
    if (!newEndpoint.path.trim() || !newEndpoint.description.trim()) {
      toast.error("Please fill in all required fields");
      return;
    }

    const endpoint: Endpoint = {
      id: Date.now().toString(),
      method: newEndpoint.method,
      path: newEndpoint.path.startsWith('/') ? newEndpoint.path : `/${newEndpoint.path}`,
      description: newEndpoint.description,
      model: newEndpoint.model,
      autoGenerated: false,
      status: "active"
    };

    setEndpoints([...endpoints, endpoint]);
    setNewEndpoint({ method: "GET", path: "", description: "", model: "Custom" });
    setShowNewEndpointDialog(false);
    toast.success(`Endpoint "${endpoint.method} ${endpoint.path}" created successfully!`);
  };

  const handleDeleteEndpoint = (endpointId: string) => {
    const endpoint = endpoints.find(e => e.id === endpointId);
    setEndpoints(endpoints.filter(e => e.id !== endpointId));
    if (selectedEndpoint?.id === endpointId) {
      setSelectedEndpoint(null);
    }
    toast.success(`Endpoint "${endpoint?.method} ${endpoint?.path}" deleted successfully!`);
  };

  const handleTestEndpoint = (endpoint: Endpoint) => {
    toast.info(`Testing ${endpoint.method} ${endpoint.path}...`);
    // Simulate API test
    setTimeout(() => {
      toast.success(`‚úÖ ${endpoint.method} ${endpoint.path} responded successfully!`);
    }, 1500);
  };

  const handleCopyEndpoint = (endpoint: Endpoint) => {
    const baseUrl = "http://localhost:3000"; // This would come from project config
    const fullUrl = `${baseUrl}${endpoint.path}`;
    navigator.clipboard.writeText(fullUrl);
    toast.success("Endpoint URL copied to clipboard!");
  };

  const getMethodColor = (method: string) => {
    const colors = {
      GET: "bg-green-100 text-green-800",
      POST: "bg-blue-100 text-blue-800",
      PUT: "bg-yellow-100 text-yellow-800",
      DELETE: "bg-red-100 text-red-800",
    };
    return colors[method as keyof typeof colors] || "bg-gray-100 text-gray-800";
  };

  const autoGeneratedEndpoints = endpoints.filter(e => e.autoGenerated);
  const customEndpoints = endpoints.filter(e => !e.autoGenerated);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            API Endpoints
          </h1>
          <p className="text-gray-600 mt-2">Manage your API endpoints and request flows</p>
        </div>
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            onClick={() => toast.success("All endpoints generated successfully!")}
          >
            <ArrowRight className="w-4 h-4 mr-2" />
            Generate All
          </Button>
          <Dialog open={showNewEndpointDialog} onOpenChange={setShowNewEndpointDialog}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700">
                <Plus className="w-4 h-4 mr-2" />
                Create Custom Endpoint
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Create Custom Endpoint</DialogTitle>
              </DialogHeader>
              <div className="space-y-4 mt-4">
                <div className="grid grid-cols-4 gap-2">
                  <div>
                    <Label>Method</Label>
                    <Select value={newEndpoint.method} onValueChange={(value: "GET" | "POST" | "PUT" | "DELETE") => 
                      setNewEndpoint(prev => ({ ...prev, method: value }))
                    }>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="GET">GET</SelectItem>
                        <SelectItem value="POST">POST</SelectItem>
                        <SelectItem value="PUT">PUT</SelectItem>
                        <SelectItem value="DELETE">DELETE</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-3">
                    <Label>Path</Label>
                    <Input
                      value={newEndpoint.path}
                      onChange={(e) => setNewEndpoint(prev => ({ ...prev, path: e.target.value }))}
                      placeholder="/api/my-endpoint"
                    />
                  </div>
                </div>
                <div>
                  <Label>Description</Label>
                  <Input
                    value={newEndpoint.description}
                    onChange={(e) => setNewEndpoint(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="What does this endpoint do?"
                  />
                </div>
                <div>
                  <Label>Model</Label>
                  <Select value={newEndpoint.model} onValueChange={(value) => 
                    setNewEndpoint(prev => ({ ...prev, model: value }))
                  }>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="User">User</SelectItem>
                      <SelectItem value="Post">Post</SelectItem>
                      <SelectItem value="Custom">Custom</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex justify-end space-x-2">
                  <Button variant="outline" onClick={() => setShowNewEndpointDialog(false)}>
                    Cancel
                  </Button>
                  <Button onClick={handleAddEndpoint}>Create Endpoint</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Request Flow Visualization */}
      <Card>
        <CardHeader>
          <CardTitle>Request Processing Flow</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            {requestFlow.map((step, index) => (
              <div key={step.step} className="flex items-center">
                <div className="flex flex-col items-center space-y-2">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg">
                    {step.icon}
                  </div>
                  <div className="text-center">
                    <p className="font-semibold text-sm">{step.step}</p>
                    <p className="text-xs text-gray-500">{step.description}</p>
                  </div>
                </div>
                {index < requestFlow.length - 1 && (
                  <ArrowRight className="w-6 h-6 text-gray-400 mx-4" />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Endpoints List */}
      <Tabs defaultValue="auto" className="space-y-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="auto">Auto-Generated ({autoGeneratedEndpoints.length})</TabsTrigger>
          <TabsTrigger value="custom">Custom ({customEndpoints.length})</TabsTrigger>
        </TabsList>
        
        <TabsContent value="auto" className="space-y-4">
          <div className="grid gap-4">
            {autoGeneratedEndpoints.map((endpoint) => (
              <Card key={endpoint.id} className="hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => setSelectedEndpoint(endpoint)}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Badge className={getMethodColor(endpoint.method)}>
                        {endpoint.method}
                      </Badge>
                      <div>
                        <p className="font-medium">{endpoint.path}</p>
                        <p className="text-sm text-gray-500">{endpoint.description}</p>
                      </div>
                      <Badge variant="outline" className="text-xs">
                        {endpoint.model}
                      </Badge>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleTestEndpoint(endpoint);
                        }}
                      >
                        <Play className="w-3 h-3 mr-1" />
                        Test
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleCopyEndpoint(endpoint);
                        }}
                      >
                        <Copy className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
        
        <TabsContent value="custom" className="space-y-4">
          <div className="grid gap-4">
            {customEndpoints.map((endpoint) => (
              <Card key={endpoint.id} className="hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => setSelectedEndpoint(endpoint)}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Badge className={getMethodColor(endpoint.method)}>
                        {endpoint.method}
                      </Badge>
                      <div>
                        <p className="font-medium">{endpoint.path}</p>
                        <p className="text-sm text-gray-500">{endpoint.description}</p>
                      </div>
                      <Badge variant="outline" className="text-xs">
                        {endpoint.model}
                      </Badge>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleTestEndpoint(endpoint);
                        }}
                      >
                        <Play className="w-3 h-3 mr-1" />
                        Test
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleCopyEndpoint(endpoint);
                        }}
                      >
                        <Copy className="w-3 h-3" />
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedEndpoint(endpoint);
                        }}
                      >
                        <Edit className="w-3 h-3" />
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteEndpoint(endpoint.id);
                        }}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
            
            {customEndpoints.length === 0 && (
              <div className="text-center py-12">
                <div className="text-gray-400 text-6xl mb-4">üîó</div>
                <h3 className="text-lg font-semibold text-gray-600 mb-2">No custom endpoints yet</h3>
                <p className="text-gray-500 mb-4">Create custom endpoints for specialized functionality</p>
                <Button 
                  onClick={() => setShowNewEndpointDialog(true)}
                  className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Create First Custom Endpoint
                </Button>
              </div>
            )}
          </div>
        </TabsContent>
      </Tabs>

      {/* Endpoint Details Panel */}
      {selectedEndpoint && (
        <Card className="fixed right-6 top-20 w-96 max-h-[calc(100vh-5rem)] overflow-y-auto shadow-lg z-50">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Badge className={getMethodColor(selectedEndpoint.method)}>
                  {selectedEndpoint.method}
                </Badge>
                <CardTitle className="text-lg">{selectedEndpoint.path}</CardTitle>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSelectedEndpoint(null)}
                className="h-6 w-6 p-0"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label>Description</Label>
              <p className="text-sm text-gray-600 mt-1">{selectedEndpoint.description}</p>
            </div>
            
            <div>
              <Label>Model</Label>
              <p className="text-sm text-gray-600 mt-1">{selectedEndpoint.model}</p>
            </div>

            {selectedEndpoint.parameters && selectedEndpoint.parameters.length > 0 && (
              <div>
                <Label>Path Parameters</Label>
                <div className="mt-1 space-y-1">
                  {selectedEndpoint.parameters.map((param) => (
                    <Badge key={param} variant="secondary" className="mr-1">
                      {param}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            <div>
              <Label>Status</Label>
              <div className="mt-1">
                <Badge variant={selectedEndpoint.status === 'active' ? 'default' : 'secondary'}>
                  {selectedEndpoint.status}
                </Badge>
              </div>
            </div>

            <div>
              <Label>Type</Label>
              <div className="mt-1">
                <Badge variant={selectedEndpoint.autoGenerated ? 'default' : 'outline'}>
                  {selectedEndpoint.autoGenerated ? 'Auto-generated' : 'Custom'}
                </Badge>
              </div>
            </div>

            <div className="space-y-2 pt-4">
              <Button 
                className="w-full"
                onClick={() => handleTestEndpoint(selectedEndpoint)}
              >
                <Play className="w-4 h-4 mr-2" />
                Test Endpoint
              </Button>
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => handleCopyEndpoint(selectedEndpoint)}
              >
                <Copy className="w-4 h-4 mr-2" />
                Copy URL
              </Button>
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => window.open(`http://localhost:3000${selectedEndpoint.path}`, '_blank')}
              >
                <ExternalLink className="w-4 h-4 mr-2" />
                Open in Browser
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
