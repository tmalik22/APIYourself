import React, { useState, useEffect } from "react";
import { Plus, Edit, Trash2, Play, ArrowRight, Save, X, Copy, ExternalLink, HelpCircle, Info, Lightbulb, Database } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { toast } from "sonner";

interface Endpoint {
  id: string;
  method: "GET" | "POST" | "PUT" | "DELETE";
  path: string;
  description: string;
  model: string;
  autoGenerated: boolean;
  status: "active" | "inactive";
  parameters?: string[];
  requestBody?: string;
  responseSchema?: string;
}

const mockEndpoints: Endpoint[] = [
  { id: "1", method: "GET", path: "/api/users", description: "Get all users - Returns a list of all users", model: "User", autoGenerated: true, status: "active" },
  { id: "2", method: "POST", path: "/api/users", description: "Create new user - Adds a new user to the database", model: "User", autoGenerated: true, status: "active" },
  { id: "3", method: "GET", path: "/api/users/:id", description: "Get user by ID - Returns a specific user", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "4", method: "PUT", path: "/api/users/:id", description: "Update user - Modifies an existing user", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "5", method: "DELETE", path: "/api/users/:id", description: "Delete user - Removes a user from the database", model: "User", autoGenerated: true, status: "active", parameters: ["id"] },
  { id: "6", method: "GET", path: "/api/posts", description: "Get all posts - Returns a list of all blog posts", model: "Post", autoGenerated: true, status: "active" },
  { id: "7", method: "POST", path: "/api/posts", description: "Create new post - Adds a new blog post", model: "Post", autoGenerated: true, status: "active" },
  { id: "8", method: "GET", path: "/api/auth/login", description: "User login - Authenticate user and return access token", model: "Custom", autoGenerated: false, status: "active" },
];

// HTTP Method explanations
const methodExplanations = {
  GET: {
    description: "Retrieve data",
    color: "bg-green-100 text-green-800",
    use: "Use for reading/fetching data. Should not modify anything.",
    example: "GET /api/users - Get all users"
  },
  POST: {
    description: "Create new data",
    color: "bg-blue-100 text-blue-800",
    use: "Use for creating new resources. Sends data in request body.",
    example: "POST /api/users - Create a new user"
  },
  PUT: {
    description: "Update existing data",
    color: "bg-orange-100 text-orange-800",
    use: "Use for updating entire resources. Replaces existing data.",
    example: "PUT /api/users/123 - Update user with ID 123"
  },
  DELETE: {
    description: "Remove data",
    color: "bg-red-100 text-red-800",
    use: "Use for deleting resources. Cannot be undone.",
    example: "DELETE /api/users/123 - Delete user with ID 123"
  }
};

// Common endpoint patterns
const endpointPatterns = [
  {
    name: "List All",
    pattern: "GET /api/{model}",
    description: "Get all records of a model",
    example: "GET /api/users → Returns array of all users"
  },
  {
    name: "Get One",
    pattern: "GET /api/{model}/:id",
    description: "Get a specific record by ID",
    example: "GET /api/users/123 → Returns user with ID 123"
  },
  {
    name: "Create",
    pattern: "POST /api/{model}",
    description: "Create a new record",
    example: "POST /api/users → Creates new user from request body"
  },
  {
    name: "Update",
    pattern: "PUT /api/{model}/:id",
    description: "Update an existing record",
    example: "PUT /api/users/123 → Updates user with ID 123"
  },
  {
    name: "Delete",
    pattern: "DELETE /api/{model}/:id",
    description: "Delete a record",
    example: "DELETE /api/users/123 → Removes user with ID 123"
  }
];

const requestFlow = [
  { step: "Request", description: "Incoming API request", icon: "📥" },
  { step: "Auth", description: "Authentication check", icon: "🔐" },
  { step: "Validation", description: "Data validation", icon: "✅" },
  { step: "Database", description: "Database operation", icon: "🗄️" },
  { step: "Response", description: "Response formatting", icon: "📤" },
];

interface EndpointBuilderProps {
  project: any;
  onBackToDashboard?: () => void;
}

export function EndpointBuilder({ project, onBackToDashboard }: EndpointBuilderProps) {
  const getInitialEndpoints = () => {
    if (project?.id) {
      try {
        const savedEndpoints = localStorage.getItem(`api-builder-endpoints-${project.id}`);
        if (savedEndpoints) {
          return JSON.parse(savedEndpoints);
        }
      } catch (error) {
        console.warn('Failed to load endpoints from localStorage:', error);
      }
    }
    return project?.endpointDefinitions || mockEndpoints;
  };

  const [endpoints, setEndpoints] = useState<Endpoint[]>(getInitialEndpoints);
  const [showHelp, setShowHelp] = useState(false);
  
  // Save endpoints to localStorage whenever they change
  useEffect(() => {
    if (project?.id) {
      try {
        localStorage.setItem(`api-builder-endpoints-${project.id}`, JSON.stringify(endpoints));
      } catch (error) {
        console.warn('Failed to save endpoints to localStorage:', error);
      }
    }
  }, [endpoints, project?.id]);
  const [selectedEndpoint, setSelectedEndpoint] = useState<Endpoint | null>(null);
  const [showNewEndpointDialog, setShowNewEndpointDialog] = useState(false);
  const [newEndpoint, setNewEndpoint] = useState({
    method: "GET" as const,
    path: "",
    description: "",
    model: "Custom"
  });

  const projectModels = project?.models || [];

  const handleAddEndpoint = () => {
    if (!newEndpoint.path.trim() || !newEndpoint.description.trim()) {
      toast.error("Please fill in all required fields");
      return;
    }

    const endpoint: Endpoint = {
      id: Date.now().toString(),
      method: newEndpoint.method,
      path: newEndpoint.path.startsWith('/') ? newEndpoint.path : `/${newEndpoint.path}`,
      description: newEndpoint.description,
      model: newEndpoint.model,
      autoGenerated: false,
      status: "active"
    };

    setEndpoints([...endpoints, endpoint]);
    setNewEndpoint({ method: "GET", path: "", description: "", model: "Custom" });
    setShowNewEndpointDialog(false);
    toast.success(`Endpoint "${endpoint.method} ${endpoint.path}" created successfully!`);
  };

  const handleDeleteEndpoint = (endpointId: string) => {
    const endpoint = endpoints.find(e => e.id === endpointId);
    setEndpoints(endpoints.filter(e => e.id !== endpointId));
    if (selectedEndpoint?.id === endpointId) {
      setSelectedEndpoint(null);
    }
    toast.success(`Endpoint "${endpoint?.method} ${endpoint?.path}" deleted successfully!`);
  };

  const handleTestEndpoint = (endpoint: Endpoint) => {
    toast.info(`Testing ${endpoint.method} ${endpoint.path}...`);
    // Simulate API test
    setTimeout(() => {
      toast.success(`✅ ${endpoint.method} ${endpoint.path} responded successfully!`);
    }, 1500);
  };

  const handleCopyEndpoint = (endpoint: Endpoint) => {
    const baseUrl = "http://localhost:3000"; // This would come from project config
    const fullUrl = `${baseUrl}${endpoint.path}`;
    navigator.clipboard.writeText(fullUrl);
    toast.success("Endpoint URL copied to clipboard!");
  };

  const getMethodColor = (method: string) => {
    const colors = {
      GET: "bg-green-100 text-green-800",
      POST: "bg-blue-100 text-blue-800",
      PUT: "bg-yellow-100 text-yellow-800",
      DELETE: "bg-red-100 text-red-800",
    };
    return colors[method as keyof typeof colors] || "bg-gray-100 text-gray-800";
  };

  const autoGeneratedEndpoints = endpoints.filter(e => e.autoGenerated);
  const customEndpoints = endpoints.filter(e => !e.autoGenerated);

  const groupedEndpoints = autoGeneratedEndpoints.reduce((acc, endpoint) => {
    const model = endpoint.model || 'General';
    if (!acc[model]) {
      acc[model] = [];
    }
    acc[model].push(endpoint);
    return acc;
  }, {} as Record<string, Endpoint[]>);

  return (
    <div className="space-y-6">
      {/* Help Section for Empty State */}
      {endpoints.length === 0 && (
        <Alert className="bg-blue-50 border-blue-200">
          <Info className="h-4 w-4 text-blue-600" />
          <AlertDescription>
            <div className="space-y-3">
              <div>
                <strong>Welcome to API Endpoints!</strong> This is where you define how clients interact with your API.
              </div>
              <div className="text-sm space-y-2">
                <p><strong>What are API Endpoints?</strong> They're the URLs that applications use to request or send data.</p>
                <p><strong>Example:</strong> GET /api/users returns a list of users, POST /api/users creates a new user.</p>
                <p><strong>Good News:</strong> We automatically create CRUD endpoints for each of your data models!</p>
              </div>
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            API Endpoints
            {project && <span className="text-lg font-normal text-gray-600 ml-2">- {project.name}</span>}
          </h1>
          <p className="text-gray-600 mt-2">Define how clients interact with your data - each endpoint becomes a URL in your API</p>
          {project && (
            <div className="flex items-center space-x-2 mt-1">
              <Badge variant="outline">{project.template}</Badge>
              <span className="text-sm text-gray-500">{endpoints.length} endpoints configured</span>
              <span className="text-sm text-gray-400">({endpoints.filter(e => e.autoGenerated).length} auto-generated)</span>
            </div>
          )}
          {endpoints.length > 0 && (
            <div className="mt-2 text-sm text-gray-500">
              💡 <strong>Tip:</strong> Green badges show auto-generated CRUD endpoints. Blue badges are custom endpoints you created.
            </div>
          )}
        </div>
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            onClick={() => setShowHelp(true)}
            className="flex items-center"
          >
            <HelpCircle className="w-4 h-4 mr-2" />
            Help
          </Button>
          {onBackToDashboard && (
            <Button 
              variant="outline" 
              onClick={onBackToDashboard}
              className="flex items-center"
            >
              ← Back to Dashboard
            </Button>
          )}
          <Button className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
            onClick={() => setShowNewEndpointDialog(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Create Custom Endpoint
          </Button>
        </div>
      </div>

      {/* Request Flow Visualization */}
      <Card>
        <CardHeader>
          <CardTitle>Request Processing Flow</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            {requestFlow.map((step, index) => (
              <div key={step.step} className="flex items-center">
                <div className="flex flex-col items-center space-y-2">
                  <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg">
                    {step.icon}
                  </div>
                  <div className="text-center">
                    <p className="font-semibold text-sm">{step.step}</p>
                    <p className="text-xs text-gray-500">{step.description}</p>
                  </div>
                </div>
                {index < requestFlow.length - 1 && (
                  <ArrowRight className="w-5 h-5 text-gray-400 mx-4" />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Endpoints */}
      <Tabs defaultValue="auto" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="auto">Auto-Generated ({autoGeneratedEndpoints.length})</TabsTrigger>
          <TabsTrigger value="custom">Custom Endpoints ({customEndpoints.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="auto" className="mt-6">
          <Alert className="bg-green-50 border-green-200 mb-6">
            <Lightbulb className="h-4 w-4 text-green-600" />
            <AlertDescription>
              <strong className="text-green-800">Endpoints generated from your Data Models.</strong>
              <p className="text-sm mt-1 text-green-700">
                For each model, we provide a full set of CRUD (Create, Read, Update, Delete) endpoints. This saves you time and ensures your API follows best practices. You can't edit them directly, but you can customize their processing flow.
              </p>
            </AlertDescription>
          </Alert>
          <div className="space-y-6">
            {Object.keys(groupedEndpoints).length > 0 ? (
              Object.entries(groupedEndpoints).map(([model, modelEndpoints]) => (
                <div key={model}>
                  <h3 className="text-lg font-semibold mb-3 text-gray-800 flex items-center">
                    <Database className="w-5 h-5 mr-2 text-purple-600" />
                    {model} Model
                  </h3>
                  <div className="space-y-3 border-l-2 border-purple-200 pl-4 ml-2.5">
                    {modelEndpoints.map((endpoint) => (
                      <Card key={endpoint.id} className="hover:shadow-md transition-shadow" >
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-4 cursor-pointer" onClick={() => setSelectedEndpoint(endpoint)}>
                              <Badge className={getMethodColor(endpoint.method)}>
                                {endpoint.method}
                              </Badge>
                              <div>
                                <p className="font-mono text-sm font-semibold">{endpoint.path}</p>
                                <p className="text-gray-600 text-sm">{endpoint.description}</p>
                              </div>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs bg-green-100 text-green-800">
                                Auto-Generated
                              </Badge>
                              <Badge variant={endpoint.status === 'active' ? 'default' : 'secondary'} className={endpoint.status === 'active' ? 'bg-green-500' : ''}>
                                {endpoint.status}
                              </Badge>
                              <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); handleTestEndpoint(endpoint); }}>
                                <Play className="w-4 h-4" />
                              </Button>
                              <TooltipProvider>
                                <Tooltip>
                                  <TooltipTrigger asChild>
                                    <span tabIndex={0}>
                                      <Button variant="ghost" size="sm" disabled>
                                        <Edit className="w-4 h-4" />
                                      </Button>
                                    </span>
                                  </TooltipTrigger>
                                  <TooltipContent>
                                    <p>Auto-generated endpoints can't be edited directly. <br /> You can customize the processing steps though!</p>
                                  </TooltipContent>
                                </Tooltip>
                              </TooltipProvider>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              ))
            ) : (
              <Card className="text-center py-12">
                <CardContent>
                  <Database className="w-12 h-12 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No data models found</h3>
                  <p className="text-gray-600 mb-4">Once you create data models, we'll automatically generate endpoints here.</p>
                  <Button variant="outline">Go to Data Models</Button>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>

        <TabsContent value="custom" className="mt-6">
          <div className="space-y-4">
            {customEndpoints.length === 0 ? (
              <Card className="text-center py-12">
                <CardContent>
                  <Plus className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No custom endpoints</h3>
                  <p className="text-gray-600 mb-4">Create custom endpoints to extend beyond CRUD operations</p>
                  <Button className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700">
                    Create Your First Endpoint
                  </Button>
                </CardContent>
              </Card>
            ) : (
              customEndpoints.map((endpoint) => (
                <Card key={endpoint.id} className="hover:shadow-md transition-shadow cursor-pointer">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4" onClick={() => setSelectedEndpoint(endpoint)}>
                        <Badge className={getMethodColor(endpoint.method)}>
                          {endpoint.method}
                        </Badge>
                        <div>
                          <p className="font-mono text-sm font-semibold">{endpoint.path}</p>
                          <p className="text-gray-600 text-sm">{endpoint.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="text-xs bg-purple-100 text-purple-800">
                          Custom
                        </Badge>
                        <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); handleTestEndpoint(endpoint); }}>
                          <Play className="w-4 h-4" />
                        </Button>
                        <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); setSelectedEndpoint(endpoint); /* Logic to open edit dialog */ }}>
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); handleDeleteEndpoint(endpoint.id); }}>
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </TabsContent>
      </Tabs>

      {/* Help Dialog */}
      <Dialog open={showHelp} onOpenChange={setShowHelp}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Understanding API Endpoints</DialogTitle>
          </DialogHeader>
          <Tabs defaultValue="basics" className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="basics">Basics</TabsTrigger>
              <TabsTrigger value="methods">HTTP Methods</TabsTrigger>
              <TabsTrigger value="patterns">Common Patterns</TabsTrigger>
              <TabsTrigger value="examples">Examples</TabsTrigger>
            </TabsList>
            
            <TabsContent value="basics" className="space-y-4">
              <div>
                <h3 className="font-semibold mb-2">What are API Endpoints?</h3>
                <p className="text-sm text-gray-600 mb-4">
                  API endpoints are specific URLs that your application exposes to allow other applications (like mobile apps, websites, or other services) to interact with your data.
                </p>
                
                <h3 className="font-semibold mb-2">Key Parts of an Endpoint:</h3>
                <div className="space-y-3 text-sm">
                  <div className="bg-gray-50 p-3 rounded">
                    <strong>HTTP Method:</strong> Tells you what action to perform (GET, POST, PUT, DELETE)
                  </div>
                  <div className="bg-gray-50 p-3 rounded">
                    <strong>Path:</strong> The URL path that identifies the resource (e.g., /api/users)
                  </div>
                  <div className="bg-gray-50 p-3 rounded">
                    <strong>Parameters:</strong> Dynamic parts of the URL (e.g., :id in /api/users/:id)
                  </div>
                </div>
                
                <Alert className="mt-4 bg-green-50 border-green-200">
                  <Lightbulb className="h-4 w-4 text-green-600" />
                  <AlertDescription>
                    <strong>Auto-Generated Endpoints:</strong> For each data model you create, we automatically generate the most common endpoints (CRUD operations).
                  </AlertDescription>
                </Alert>
              </div>
            </TabsContent>
            
            <TabsContent value="methods" className="space-y-4">
              <div>
                <h3 className="font-semibold mb-3">HTTP Methods Explained:</h3>
                <div className="space-y-3">
                  {Object.entries(methodExplanations).map(([method, info]) => (
                    <div key={method} className="border rounded p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <Badge className={info.color}>{method}</Badge>
                          <strong className="text-sm">{info.description}</strong>
                        </div>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{info.use}</p>
                      <p className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
                        <strong>Example:</strong> {info.example}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="patterns" className="space-y-4">
              <div>
                <h3 className="font-semibold mb-3">Common Endpoint Patterns:</h3>
                <div className="space-y-3">
                  {endpointPatterns.map((pattern, index) => (
                    <div key={index} className="border rounded p-4">
                      <div className="flex items-center space-x-2 mb-2">
                        <Badge variant="outline">{pattern.name}</Badge>
                        <code className="text-sm bg-gray-100 px-2 py-1 rounded">{pattern.pattern}</code>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{pattern.description}</p>
                      <p className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
                        {pattern.example}
                      </p>
                    </div>
                  ))}
                </div>
                
                <Alert className="bg-blue-50 border-blue-200">
                  <Info className="h-4 w-4 text-blue-600" />
                  <AlertDescription>
                    <strong>Note:</strong> {`{model}`} gets replaced with your actual model name (e.g., "users", "posts", "products")
                  </AlertDescription>
                </Alert>
              </div>
            </TabsContent>
            
            <TabsContent value="examples" className="space-y-4">
              <div>
                <h3 className="font-semibold mb-3">Real-World Examples:</h3>
                
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Blog System Endpoints</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2 text-sm">
                      <div className="grid gap-2">
                        <div className="bg-green-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-green-100 text-green-800 mr-2">GET</Badge>/api/posts</span>
                          <span className="text-gray-600">Get all blog posts</span>
                        </div>
                        <div className="bg-blue-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-blue-100 text-blue-800 mr-2">POST</Badge>/api/posts</span>
                          <span className="text-gray-600">Create a new blog post</span>
                        </div>
                        <div className="bg-green-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-green-100 text-green-800 mr-2">GET</Badge>/api/posts/123</span>
                          <span className="text-gray-600">Get specific post (ID 123)</span>
                        </div>
                        <div className="bg-orange-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-orange-100 text-orange-800 mr-2">PUT</Badge>/api/posts/123</span>
                          <span className="text-gray-600">Update post with ID 123</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">E-commerce Endpoints</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-2 text-sm">
                      <div className="grid gap-2">
                        <div className="bg-green-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-green-100 text-green-800 mr-2">GET</Badge>/api/products</span>
                          <span className="text-gray-600">Browse product catalog</span>
                        </div>
                        <div className="bg-blue-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-blue-100 text-blue-800 mr-2">POST</Badge>/api/orders</span>
                          <span className="text-gray-600">Place a new order</span>
                        </div>
                        <div className="bg-green-50 p-2 rounded flex justify-between">
                          <span><Badge className="bg-green-100 text-green-800 mr-2">GET</Badge>/api/orders/456</span>
                          <span className="text-gray-600">Check order status</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </DialogContent>
      </Dialog>

      {/* Create Endpoint Dialog */}
      <Dialog open={showNewEndpointDialog} onOpenChange={setShowNewEndpointDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create a New Custom Endpoint</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="method" className="text-right">
                Method
              </Label>
              <Select
                value={newEndpoint.method}
                onValueChange={(value: "GET" | "POST" | "PUT" | "DELETE") => setNewEndpoint({ ...newEndpoint, method: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select HTTP method" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="GET">GET - Retrieve data</SelectItem>
                  <SelectItem value="POST">POST - Create data</SelectItem>
                  <SelectItem value="PUT">PUT - Update data</SelectItem>
                  <SelectItem value="DELETE">DELETE - Remove data</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="path" className="text-right">
                Path
              </Label>
              <Input
                id="path"
                placeholder="/api/custom/route"
                value={newEndpoint.path}
                onChange={(e) => setNewEndpoint({ ...newEndpoint, path: e.target.value })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Description
              </Label>
              <Input
                id="description"
                placeholder="Describe what this endpoint does"
                value={newEndpoint.description}
                onChange={(e) => setNewEndpoint({ ...newEndpoint, description: e.target.value })}
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="model" className="text-right">
                Data Model
              </Label>
              <Select
                  value={newEndpoint.model}
                  onValueChange={(value) => setNewEndpoint({ ...newEndpoint, model: value })}
              >
                  <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select a data model" />
                  </SelectTrigger>
                  <SelectContent>
                      <SelectItem value="Custom">
                          <span className="font-semibold">Custom (No Model)</span>
                      </SelectItem>
                      {projectModels.map((model: any) => (
                          <SelectItem key={model.id} value={model.name}>
                              {model.name}
                          </SelectItem>
                      ))}
                  </SelectContent>
              </Select>
            </div>
            <div className="col-span-4">
              <p className="text-xs text-gray-500 text-right -mt-2 pr-1">
                Link this endpoint to a model or create a fully custom one.
              </p>
            </div>
          </div>
          <div className="flex justify-end space-x-2">
            <Button variant="ghost" onClick={() => setShowNewEndpointDialog(false)}>Cancel</Button>
            <Button onClick={handleAddEndpoint}>Create Endpoint</Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Endpoint Details Side Panel */}
      {selectedEndpoint && (
        <Dialog open={!!selectedEndpoint} onOpenChange={(open) => { if (!open) setSelectedEndpoint(null); }}>
          <DialogContent className="max-w-3xl">
            <DialogHeader>
              <DialogTitle>
                Endpoint Details
                <div className="text-sm text-gray-500 font-medium">
                  {selectedEndpoint.method} {selectedEndpoint.path}
                </div>
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="font-semibold">Description</Label>
                  <p className="text-gray-700">{selectedEndpoint.description}</p>
                </div>
                <div>
                  <Label className="font-semibold">Status</Label>
                  <Badge variant={selectedEndpoint.status === 'active' ? 'default' : 'secondary'} className={selectedEndpoint.status === 'active' ? 'bg-green-500' : ''}>
                    {selectedEndpoint.status}
                  </Badge>
                </div>
              </div>
              
              <div>
                <Label className="font-semibold">Processing Steps</Label>
                <div className="space-y-2">
                  {requestFlow.map((step) => (
                    <div key={step.step} className="flex items-center">
                      <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-gray-500 mr-3">
                        {step.icon}
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium">{step.step}</p>
                        <p className="text-xs text-gray-500">{step.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label className="font-semibold">Test This Endpoint</Label>
                <Button className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700" onClick={() => handleTestEndpoint(selectedEndpoint)}>
                  <Play className="w-4 h-4 mr-2" />
                  Test Endpoint
                </Button>
              </div>
            </div>

            <Alert className="mt-4 bg-blue-50 border-blue-200">
              <Info className="h-4 w-4 text-blue-600" />
              <AlertDescription>
                <strong>How it Works:</strong> When you create a Data Model (e.g., "Product"), we automatically generate the essential endpoints for it:
                <ul className="list-disc pl-5 mt-2 font-mono text-xs">
                    <li><Badge className={methodExplanations.GET.color}>GET</Badge> /api/products</li>
                    <li><Badge className={methodExplanations.POST.color}>POST</Badge> /api/products</li>
                    <li><Badge className={methodExplanations.GET.color}>GET</Badge> /api/products/:id</li>
                    <li><Badge className={methodExplanations.PUT.color}>PUT</Badge> /api/products/:id</li>
                    <li><Badge className={methodExplanations.DELETE.color}>DELETE</Badge> /api/products/:id</li>
                </ul>
                <p className="mt-2 text-xs">You can then create <strong>custom endpoints</strong> for special logic, like a `/api/login` route.</p>
              </AlertDescription>
            </Alert>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
